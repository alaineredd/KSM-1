import math

"""ОРБИТАЛЬНЫЕ ПЕРЕХОДЫ"""


def test1(I_sp, M_t, M_r, g):
    # формула циолковского
    # принимает I_sp - специфический импульс
    # M_t - масса топлива
    # M_r - масса ракеты без топлива
    # g - ускорение свободного падения
    return I_sp * g * math.log(1 + M_t / M_r)


def test2(I_sps: list, Fs: list):
    # принимает список тяг двигателей (ну если у нас работают ускорители и главный двигатель одновременно)
    # принимает список специфического импульса двигателей
    # возвращает I_sp, как если бы это был один двигатель
    F_sum = 0
    znam = 0
    for i in range(len(I_sps)):
        F_sum += Fs[i]
        znam += Fs[i] / I_sps[i]

    return F_sum / znam


def test3(mu, r1, r2):
    # принимает стандартный гравитационный параметр mu
    # радиус круговой орбиты r1, радиус круговой орбиты r2
    # r1 < r2
    a = (r1 + r2) / 2
    dv1 = math.sqrt(mu / r1) * (math.sqrt(r2 / a) - 1)
    dv2 = math.sqrt(mu / r2) * (1 - math.sqrt(r1 / a))
    # dv1 - На такое значение нужно увеличить скорость, будучи на круговой орбите r1
    # dv2 - на Такое значение нужно увеличить скорость, будучи на переходной траектории гомана (высота апоцентра это r2)
    return dv1, dv2


"""ОПТИМАЛЬНОЕ ОКНО"""


def test4(a, mu):
    # принимает бОльшую полуось (просто радиус, если орбита круговая),
    # принимает гравитационный параметр mu (при переходе от Кербина к Дюне это будет параметр Кербола - Солнца)
    # возвращает период вращения по орбите
    return 2 * math.pi * math.sqrt(a**3 / mu)


def test5(T1, T2):
    # Принимает период вращения T1 по переходной орбите
    # Принимает период вращения Дюны
    # Возвращает фазовый угол Дюна - Кербол - Кербин
    return 180 * (1 - T1 / T2)


def test6(mu, v_sk, r_pk, soi_kerbin):
    # mu - гравитационный параметр той планеты из которой мы хоти вылететь
    # v_sk - скорость, с которой мы должны вылететь из SOI планеты
    # r_pk - расстояние от центра планеты (если мы на орбите Кербина с радиусом 100км, то эта штука это 700км)
    v_pK = math.sqrt(2 * mu * (1 / r_pk - 1 / soi_kerbin) + v_sk**2)
    e = math.sqrt(soi_kerbin * (v_pK**2) / mu - 1)
    return 180 - math.degrees(math.acos(1 / e))


# радиус орбиты Кербина вокруг Кербола и то же самое для Дюны
R1_k, R2_d = 1.36 * 10**10, 2.0726 * 10**10
# бОльшая полуось орбиты перехода
a = (R1_k + R2_d) / 2
mu_kerbol = 1.1723328 * 10**18

mu_kerbin = 3.5316 * 10**12
SOI_kerbin = 84159286
# Период вращения по гомановской траектории
T1 = test4(a, mu_kerbol)
#
T2 = test4(R2_d, mu_kerbol)
print(test5(T1, T2))

# V_SK - с такой скоростью ракеты должна выйти из сферы влияния кербина
# V_SD - с такой скоростью ракета войдёт в сферу влияния Дюны
V_SK, V_SD = test3(mu_kerbol, R1_k, R2_d)

theta = test6(mu_kerbin, V_SK, 700_000, SOI_kerbin)
print(theta)
